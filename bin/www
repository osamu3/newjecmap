#!/usr/bin/env node

var app = require('../app');
var scktIoDfn = require('../serverMyModules/scktIoDfn');

var debug = require('debug')('newjecmap:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//cf:https://qiita.com/kanjishima/items/5342eca62e8d5de30ccb
//ソケットIOを利用するには、①～②
//①↓直接httpモジュールインスタンスをリッスンしてもダメ。
//io.listen(http);ｘ 
//②↓httpモジュールからcreateServerして......
var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//②´↓そいつをio.listen
//var io = require('socket.io')(server);
scktIoDfn(server);//←※注！！ソケットＩＯ通信手順の定義は別ファイル

console.log("WWW Listen Port:3000");

// Normalize a port into a number, string, or false.
function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	if (port >= 0) {
		// port number
		return port;
	}
	return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

// Event listener for HTTP server "listening" event.
function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
